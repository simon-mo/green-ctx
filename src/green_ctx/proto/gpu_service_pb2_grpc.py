# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import green_ctx.proto.gpu_service_pb2 as gpu__service__pb2


class GPUServiceStub(object):
    """Service definition for GPU multiplexer
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/green_ctx.proto.GPUService/HealthCheck',
                request_serializer=gpu__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.HealthCheckResponse.FromString,
                )
        self.RequestExclusiveSMs = channel.unary_unary(
                '/green_ctx.proto.GPUService/RequestExclusiveSMs',
                request_serializer=gpu__service__pb2.RequestSMsRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.RequestSMsResponse.FromString,
                )
        self.FreeSMs = channel.unary_unary(
                '/green_ctx.proto.GPUService/FreeSMs',
                request_serializer=gpu__service__pb2.FreeSMsRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.FreeSMsResponse.FromString,
                )
        self.AllocTensor = channel.unary_unary(
                '/green_ctx.proto.GPUService/AllocTensor',
                request_serializer=gpu__service__pb2.AllocTensorRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.TensorInfo.FromString,
                )
        self.FreeTensor = channel.unary_unary(
                '/green_ctx.proto.GPUService/FreeTensor',
                request_serializer=gpu__service__pb2.FreeTensorRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.FreeTensorResponse.FromString,
                )
        self.GetTensor = channel.unary_unary(
                '/green_ctx.proto.GPUService/GetTensor',
                request_serializer=gpu__service__pb2.GetTensorRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.TensorInfo.FromString,
                )
        self.ExistTensor = channel.unary_unary(
                '/green_ctx.proto.GPUService/ExistTensor',
                request_serializer=gpu__service__pb2.ExistTensorRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.ExistTensorResponse.FromString,
                )
        self.LockTensor = channel.unary_unary(
                '/green_ctx.proto.GPUService/LockTensor',
                request_serializer=gpu__service__pb2.LockTensorRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.LockTensorResponse.FromString,
                )
        self.UnlockTensor = channel.unary_unary(
                '/green_ctx.proto.GPUService/UnlockTensor',
                request_serializer=gpu__service__pb2.UnlockTensorRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.UnlockTensorResponse.FromString,
                )
        self.KVPoolInit = channel.unary_unary(
                '/green_ctx.proto.GPUService/KVPoolInit',
                request_serializer=gpu__service__pb2.KVPoolInitRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.KVPoolInitResponse.FromString,
                )
        self.KVPoolAlloc = channel.unary_unary(
                '/green_ctx.proto.GPUService/KVPoolAlloc',
                request_serializer=gpu__service__pb2.KVPoolAllocRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.KVPoolAllocResponse.FromString,
                )
        self.KVPoolFree = channel.unary_unary(
                '/green_ctx.proto.GPUService/KVPoolFree',
                request_serializer=gpu__service__pb2.KVPoolFreeRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.KVPoolFreeResponse.FromString,
                )
        self.GetKVPoolUsage = channel.unary_unary(
                '/green_ctx.proto.GPUService/GetKVPoolUsage',
                request_serializer=gpu__service__pb2.GetKVPoolUsageRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.GetKVPoolUsageResponse.FromString,
                )
        self.SetKVPoolMemoryBytes = channel.unary_unary(
                '/green_ctx.proto.GPUService/SetKVPoolMemoryBytes',
                request_serializer=gpu__service__pb2.SetKVPoolMemoryBytesRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.SetKVPoolMemoryBytesResponse.FromString,
                )
        self.GetKVPoolMemoryBytes = channel.unary_unary(
                '/green_ctx.proto.GPUService/GetKVPoolMemoryBytes',
                request_serializer=gpu__service__pb2.GetKVPoolMemoryBytesRequest.SerializeToString,
                response_deserializer=gpu__service__pb2.GetKVPoolMemoryBytesResponse.FromString,
                )


class GPUServiceServicer(object):
    """Service definition for GPU multiplexer
    """

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestExclusiveSMs(self, request, context):
        """SM management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FreeSMs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocTensor(self, request, context):
        """Tensor management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FreeTensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExistTensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LockTensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnlockTensor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KVPoolInit(self, request, context):
        """KV cache usage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KVPoolAlloc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def KVPoolFree(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKVPoolUsage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetKVPoolMemoryBytes(self, request, context):
        """KV cache management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKVPoolMemoryBytes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GPUServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=gpu__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=gpu__service__pb2.HealthCheckResponse.SerializeToString,
            ),
            'RequestExclusiveSMs': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestExclusiveSMs,
                    request_deserializer=gpu__service__pb2.RequestSMsRequest.FromString,
                    response_serializer=gpu__service__pb2.RequestSMsResponse.SerializeToString,
            ),
            'FreeSMs': grpc.unary_unary_rpc_method_handler(
                    servicer.FreeSMs,
                    request_deserializer=gpu__service__pb2.FreeSMsRequest.FromString,
                    response_serializer=gpu__service__pb2.FreeSMsResponse.SerializeToString,
            ),
            'AllocTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocTensor,
                    request_deserializer=gpu__service__pb2.AllocTensorRequest.FromString,
                    response_serializer=gpu__service__pb2.TensorInfo.SerializeToString,
            ),
            'FreeTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.FreeTensor,
                    request_deserializer=gpu__service__pb2.FreeTensorRequest.FromString,
                    response_serializer=gpu__service__pb2.FreeTensorResponse.SerializeToString,
            ),
            'GetTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTensor,
                    request_deserializer=gpu__service__pb2.GetTensorRequest.FromString,
                    response_serializer=gpu__service__pb2.TensorInfo.SerializeToString,
            ),
            'ExistTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.ExistTensor,
                    request_deserializer=gpu__service__pb2.ExistTensorRequest.FromString,
                    response_serializer=gpu__service__pb2.ExistTensorResponse.SerializeToString,
            ),
            'LockTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.LockTensor,
                    request_deserializer=gpu__service__pb2.LockTensorRequest.FromString,
                    response_serializer=gpu__service__pb2.LockTensorResponse.SerializeToString,
            ),
            'UnlockTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.UnlockTensor,
                    request_deserializer=gpu__service__pb2.UnlockTensorRequest.FromString,
                    response_serializer=gpu__service__pb2.UnlockTensorResponse.SerializeToString,
            ),
            'KVPoolInit': grpc.unary_unary_rpc_method_handler(
                    servicer.KVPoolInit,
                    request_deserializer=gpu__service__pb2.KVPoolInitRequest.FromString,
                    response_serializer=gpu__service__pb2.KVPoolInitResponse.SerializeToString,
            ),
            'KVPoolAlloc': grpc.unary_unary_rpc_method_handler(
                    servicer.KVPoolAlloc,
                    request_deserializer=gpu__service__pb2.KVPoolAllocRequest.FromString,
                    response_serializer=gpu__service__pb2.KVPoolAllocResponse.SerializeToString,
            ),
            'KVPoolFree': grpc.unary_unary_rpc_method_handler(
                    servicer.KVPoolFree,
                    request_deserializer=gpu__service__pb2.KVPoolFreeRequest.FromString,
                    response_serializer=gpu__service__pb2.KVPoolFreeResponse.SerializeToString,
            ),
            'GetKVPoolUsage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKVPoolUsage,
                    request_deserializer=gpu__service__pb2.GetKVPoolUsageRequest.FromString,
                    response_serializer=gpu__service__pb2.GetKVPoolUsageResponse.SerializeToString,
            ),
            'SetKVPoolMemoryBytes': grpc.unary_unary_rpc_method_handler(
                    servicer.SetKVPoolMemoryBytes,
                    request_deserializer=gpu__service__pb2.SetKVPoolMemoryBytesRequest.FromString,
                    response_serializer=gpu__service__pb2.SetKVPoolMemoryBytesResponse.SerializeToString,
            ),
            'GetKVPoolMemoryBytes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKVPoolMemoryBytes,
                    request_deserializer=gpu__service__pb2.GetKVPoolMemoryBytesRequest.FromString,
                    response_serializer=gpu__service__pb2.GetKVPoolMemoryBytesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'green_ctx.proto.GPUService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GPUService(object):
    """Service definition for GPU multiplexer
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/HealthCheck',
            gpu__service__pb2.HealthCheckRequest.SerializeToString,
            gpu__service__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestExclusiveSMs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/RequestExclusiveSMs',
            gpu__service__pb2.RequestSMsRequest.SerializeToString,
            gpu__service__pb2.RequestSMsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FreeSMs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/FreeSMs',
            gpu__service__pb2.FreeSMsRequest.SerializeToString,
            gpu__service__pb2.FreeSMsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllocTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/AllocTensor',
            gpu__service__pb2.AllocTensorRequest.SerializeToString,
            gpu__service__pb2.TensorInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FreeTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/FreeTensor',
            gpu__service__pb2.FreeTensorRequest.SerializeToString,
            gpu__service__pb2.FreeTensorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/GetTensor',
            gpu__service__pb2.GetTensorRequest.SerializeToString,
            gpu__service__pb2.TensorInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExistTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/ExistTensor',
            gpu__service__pb2.ExistTensorRequest.SerializeToString,
            gpu__service__pb2.ExistTensorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LockTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/LockTensor',
            gpu__service__pb2.LockTensorRequest.SerializeToString,
            gpu__service__pb2.LockTensorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnlockTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/UnlockTensor',
            gpu__service__pb2.UnlockTensorRequest.SerializeToString,
            gpu__service__pb2.UnlockTensorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KVPoolInit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/KVPoolInit',
            gpu__service__pb2.KVPoolInitRequest.SerializeToString,
            gpu__service__pb2.KVPoolInitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KVPoolAlloc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/KVPoolAlloc',
            gpu__service__pb2.KVPoolAllocRequest.SerializeToString,
            gpu__service__pb2.KVPoolAllocResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def KVPoolFree(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/KVPoolFree',
            gpu__service__pb2.KVPoolFreeRequest.SerializeToString,
            gpu__service__pb2.KVPoolFreeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKVPoolUsage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/GetKVPoolUsage',
            gpu__service__pb2.GetKVPoolUsageRequest.SerializeToString,
            gpu__service__pb2.GetKVPoolUsageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetKVPoolMemoryBytes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/SetKVPoolMemoryBytes',
            gpu__service__pb2.SetKVPoolMemoryBytesRequest.SerializeToString,
            gpu__service__pb2.SetKVPoolMemoryBytesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKVPoolMemoryBytes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/green_ctx.proto.GPUService/GetKVPoolMemoryBytes',
            gpu__service__pb2.GetKVPoolMemoryBytesRequest.SerializeToString,
            gpu__service__pb2.GetKVPoolMemoryBytesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

syntax = "proto3";

package green_ctx.proto;

// Service definition for GPU multiplexer
service GPUService {
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {}

  // SM management
  rpc RequestExclusiveSMs(RequestSMsRequest) returns (RequestSMsResponse) {}
  rpc FreeSMs(FreeSMsRequest) returns (FreeSMsResponse) {}

  // Tensor management
  rpc AllocTensor(AllocTensorRequest) returns (TensorInfo) {}
  rpc FreeTensor(FreeTensorRequest) returns (FreeTensorResponse) {}
  rpc GetTensor(GetTensorRequest) returns (TensorInfo) {}
  rpc ExistTensor(ExistTensorRequest) returns (ExistTensorResponse) {}
  rpc LockTensor(LockTensorRequest) returns (LockTensorResponse) {}
  rpc UnlockTensor(UnlockTensorRequest) returns (UnlockTensorResponse) {}
  rpc KVPoolInit(KVPoolInitRequest) returns (KVPoolInitResponse) {}
  rpc KVPoolAlloc(KVPoolAllocRequest) returns (KVPoolAllocResponse) {}
  rpc KVPoolFree(KVPoolFreeRequest) returns (KVPoolFreeResponse) {}
  rpc ReportRequestRate(UpdateRequest) returns (RequestRateResponse) {}
}

// Health check messages
message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
  int32 total_sms = 2;
  int32 available_sms = 3;
  int32 num_tensors = 4;
  int32 request_rate = 5;
}

// SM management messages
message RequestSMsRequest {
  int32 num_sms = 1;
  string client_id = 2;
}

message RequestSMsResponse {
  string alloc_uuid = 1;
  int32 num_groups = 2;
  int32 min_size = 3;
  repeated int32 indices = 4;
  bool get_remainder = 5;
}

message FreeSMsRequest {
  string alloc_uuid = 1;
}

message FreeSMsResponse {
  bool success = 1;
}

// Tensor management messages
message TensorInfo {
  string name = 1;
  repeated int32 shape = 2;
  string dtype = 3;
  bytes serialized_info = 4;
}

message AllocTensorRequest {
  repeated int32 shape = 1;
  string dtype = 2;
  string name = 3;
  bool get_if_exists = 4;
}

message FreeTensorRequest {
  string name = 1;
}

message FreeTensorResponse {
  bool success = 1;
}

message GetTensorRequest {
  string name = 1;
}

message ExistTensorRequest {
  string name = 1;
}

message ExistTensorResponse {
  bool exists = 1;
}

message LockTensorRequest {
  string name = 1;
}

message LockTensorResponse {
  bool success = 1;
}

message UnlockTensorRequest {
  string name = 1;
}

message UnlockTensorResponse {
  bool success = 1;
}

message KVPoolInitRequest {
  string model_name = 1;
  int32 total_num_blocks = 2;
  int32 kv_block_bytes = 3;
}

message KVPoolInitResponse {
  bool success = 1;
}

message KVPoolAllocRequest {
  string model_name = 1;
  int32 num_blocks = 2;
}

message KVPoolAllocResponse {
  repeated int32 blocks = 1;
}

message KVPoolFreeRequest {
  string model_name = 1;
  repeated int32 blocks = 2;
}

message KVPoolFreeResponse {
  bool success = 1;
}

message UpdateRequest {
  int32 request_rate = 1;
}

message RequestRateResponse {
  bool success = 1;
}